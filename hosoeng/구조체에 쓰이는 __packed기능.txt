struct customer
{
	char name;
	int height;
	int weight;
}

위의 구조체의 데이터크기를 보면 char(1byte) + int(4byte) + int(4byte) 총 9byte크기를 
차지한다고 생각하지만 아니다 struct내부에서 실제 자기 크기하고는 상관없이 char name의 크기는
바로밑의 int 크기에 맞추어서 4byte공간을 차지하여서 
총 12byte크기를 가지게 된다
이를 방지하기 위해서는 struct에 __packed를 사용하게 된다

__packed를 사용하게 되면 byte alignment를 하게 되어서 빈공간 없이 꽉꽉채워넣는다
이런것이 필요한 이유가  서로다른 System끼리 Packet통신을 할때 문제가 발생한다. 
예를 들어 Embedded System과 PC Host가 서로 USB로 통신을 한다고 했을때,
PC는 int를 4byte로 인식하고 Embeeded System에서 int를 2byte로 인식한다면
서로다른 Data를 쓰더라도 막상 packet형태로는 다르게 인식한다
그래서 그런 통신 문제들을 해결하기 위하여, 최소한 Data packet으로 만드는 
Data의 byte alignment 는 byte로 하자는 것이다 
Packet Data를 꽉꽉 채워 넣으면 성능 면에서도 훨씬 유리하다

참고로 이 __packed는 GNU gcc진영에서 사용가능하다!!!!! 
